import React, { useState, useEffect, ReactNode } from "react";

interface NetworkAwareWrapperProps {
  children: ReactNode;
  onOffline?: () => void;
  onOnline?: () => void;
  offlineFallback?: ReactNode;
}

export const NetworkAwareWrapper: React.FC<NetworkAwareWrapperProps> = ({
  children,
  onOffline,
  onOnline,
  offlineFallback,
}) => {
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [connectionType, setConnectionType] = useState<string>("unknown");

  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      onOnline?.();
    };

    const handleOffline = () => {
      setIsOnline(false);
      onOffline?.();
    };

    const updateConnectionType = () => {
      const connection = (navigator as any).connection;
      if (connection) {
        setConnectionType(connection.effectiveType || "unknown");
      }
    };

    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);

    if ((navigator as any).connection) {
      (navigator as any).connection.addEventListener("change", updateConnectionType);
    }

    updateConnectionType();

    return () => {
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
      if ((navigator as any).connection) {
        (navigator as any).connection.removeEventListener("change", updateConnectionType);
      }
    };
  }, [onOffline, onOnline]);

  if (!isOnline) {
    return (
      <>
        {offlineFallback || (
          <div className="offline-notice" role="alert">
            <h3>You're Offline</h3>
            <p>The AI tutor requires an internet connection. Please check your connection and try again.</p>
          </div>
        )}
      </>
    );
  }

  if (connectionType === "2g" || connectionType === "slow-2g") {
    return (
      <>
        <div className="slow-connection-warning" role="status">
          ⚠️ Slow connection detected. Voice features may be delayed.
        </div>
        {children}
      </>
    );
  }

  return <>{children}</>;
};
