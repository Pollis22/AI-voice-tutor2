```markdown
  await voiceIntegration.streamTTS(result.response, azureTTSService, (chunk) => {
    res.write(chunk);
  });
}
```

#### Step 11: Add Debug Endpoint
Create `server/routes/debugRoutes.ts` (if not exists) or add to existing:
```typescript
import { Router } from 'express';
import { voiceIntegration } from '../modules/voiceIntegration';

const router = Router();

router.get('/api/debug/last-turns', (req, res) => {
  // Simple auth check
  const authHeader = req.headers.authorization;
  if (authHeader !== `Bearer ${process.env.DEBUG_API_KEY || 'debug-key-2024'}`) {
    return res.status(401).json({ error: 'Unauthorized' });
  }
  
  const { count = 10, sessionId } = req.query;
  const logs = voiceIntegration.getDebugLogs(Number(count), sessionId as string);
  
  res.json({
    turns: logs,
    stats: {
      total: logs.length,
      cached: logs.filter(l => l.llmMetrics?.usedCache).length,
      fallbacks: logs.filter(l => l.llmMetrics?.usedFallback).length,
      avgLatency: logs.reduce((acc, l) => acc + (l.llmMetrics?.latency || 0), 0) / logs.length
    }
  });
});

export default router;
```

#### Step 12: Environment Variables
Add to `.env`:
```bash
# Speech Gating
ASR_MIN_MS=250
ASR_MIN_CONFIDENCE=0.5
VAD_SILENCE_MS=300
MAX_UTTERANCE_MS=8000

# LLM Resilience
LLM_MAX_RETRIES=3
LLM_BACKOFF_MS=1000
LLM_CIRCUIT_THRESHOLD=5
LLM_CIRCUIT_TIMEOUT_MS=45000
TUTOR_MODEL=gpt-4o-mini

# Caching
CACHE_MAX_AGE_MS=3600000

# Debug
DEBUG_TUTOR=1
DEBUG_API_KEY=debug-key-2024
```

#### Step 13: Update OpenAI Service (Minimal Import Only)
Edit `server/services/openai.ts` - Add at the very top:
```typescript
import { voiceIntegration } from '../modules/voiceIntegration';
```

In the `generateResponse` method, after getting the response, add answer checking:
```typescript
// Find where the response is generated and add ONLY this check:
if (lastQuestion && response) {
  const checkResult = voiceIntegration.checkAnswer(
    'short', // or determine from context
    userMessage,
    expectedAnswer, // from lesson plan
    undefined
  );
  
  if (!checkResult.isCorrect) {
    response = `${checkResult.correction} ${response}`;
  }
}
```

#### Step 14: Acceptance Tests
Create `tests/acceptance.test.ts`:
```typescript
import { describe, test, expect } from '@jest/globals';
import axios from 'axios';

const API_URL = process.env.API_URL || 'http://localhost:5000';
const DEBUG_KEY = process.env.DEBUG_API_KEY || 'debug-key-2024';

describe('AI Tutor Voice Acceptance Tests', () => {
  const testSession = `test-${Date.now()}`;
  const testUser = 'test-user';

  test('Latency: Response within 2 seconds', async () => {
    const start = Date.now();
    
    const response = await axios.post(`${API_URL}/api/voice/conversation`, {
      message: "What is 2 plus 2?",
      userId: testUser,
      sessionId: testSession
    });
    
    const latency = Date.now() - start;
    expect(latency).toBeLessThan(2000);
    expect(response.data.response).toBeTruthy();
  });

  test('Answer Correction: Corrects wrong answers', async () => {
    const response = await axios.post(`${API_URL}/api/voice/conversation`, {
      message: "five", // Wrong answer to 2+2
      userId: testUser,
      sessionId: testSession,
      context: { lastQuestion: "What is 2 plus 2?", expectedAnswer: "4" }
    });
    
    expect(response.data.response).toContain('4');
    expect(response.data.response.toLowerCase()).toMatch(/(not quite|actually|correct answer)/);
  });

  test('No Repeats: Varies responses', async () => {
    const responses = [];
    
    for (let i = 0; i < 3; i++) {
      const response = await axios.post(`${API_URL}/api/voice/conversation`, {
        message: "Tell me about addition",
        userId: testUser,
        sessionId: `${testSession}-repeat`
      });
      responses.push(response.data.response);
    }
    
    // Check that responses are different
    const uniqueResponses = new Set(responses);
    expect(uniqueResponses.size).toBeGreaterThan(1);
  });

  test('Off-topic Redirect: Handles off-topic gracefully', async () => {
    const response = await axios.post(`${API_URL}/api/voice/conversation`, {
      message: "What's your favorite movie?",
      userId: testUser,
      sessionId: testSession,
      lessonPlan: { subject: 'math', topic: 'addition' }
    });
    
    expect(response.data.response.toLowerCase()).toContain('focus');
    expect(response.data.offTopic).toBe(true);
  });

  test('429 Handling: Uses fallback on rate limit', async () => {
    // Simulate circuit breaker by making many rapid requests
    const promises = [];
    for (let i = 0; i < 10; i++) {
      promises.push(
        axios.post(`${API_URL}/api/voice/conversation`, {
          message: `Question ${i}`,
          userId: testUser,
          sessionId: `${testSession}-ratelimit`
        })
      );
    }
    
    const responses = await Promise.all(promises);
    const fallbacks = responses.filter(r => r.data.fallback);
    
    // At least some should use fallback
    expect(fallbacks.length).toBeGreaterThan(0);
  });

  test('Caching: Returns cached responses quickly', async () => {
    const message = "What is the capital of France?";
    
    // First call - not cached
    const response1 = await axios.post(`${API_URL}/api/voice/conversation`, {
      message,
      userId: testUser,
      sessionId: `${testSession}-cache`
    });
    
    // Second call - should be cached
    const start = Date.now();
    const response2 = await axios.post(`${API_URL}/api/voice/conversation`, {
      message,
      userId: testUser,
      sessionId: `${testSession}-cache`
    });
    const latency = Date.now() - start;
    
    expect(response2.data.cached).toBe(true);
    expect(latency).toBeLessThan(100); // Cached responses should be instant
  });

  test('Debug Endpoint: Returns turn logs', async () => {
    // Make a few turns first
    await axios.post(`${API_URL}/api/voice/conversation`, {
      message: "Hello",
      userId: testUser,
      sessionId: `${testSession}-debug`
    });
    
    const response = await axios.get(`${API_URL}/api/debug/last-turns`, {
      headers: { Authorization: `Bearer ${DEBUG_KEY}` },
      params: { count: 5, sessionId: `${testSession}-debug` }
    });
    
    expect(response.data.turns).toBeDefined();
    expect(response.data.stats).toBeDefined();
    expect(response.data.stats.avgLatency).toBeGreaterThan(0);
  });

  test('Barge-in: Cancels in-flight requests', async () => {
    const promise1 = axios.post(`${API_URL}/api/voice/conversation`, {
      message: "Long question that takes time to process",
      userId: testUser,
      sessionId: `${testSession}-bargein`
    });
    
    // Quick barge-in
    await new Promise(resolve => setTimeout(resolve, 50));
    
    const promise2 = axios.post(`${API_URL}/api/voice/conversation`, {
      message: "Quick question",
      userId: testUser,
      sessionId: `${testSession}-bargein`
    });
    
    const [result1, result2] = await Promise.allSettled([promise1, promise2]);
    
    // First should be cancelled or aborted
    if (result1.status === 'rejected') {
      expect(result1.reason.message).toContain('abort');
    }
    
    // Second should succeed
    expect(result2.status).toBe('fulfilled');
  });

  test('Response Format: Always ends with question', async () => {
    const response = await axios.post(`${API_URL}/api/voice/conversation`, {
      message: "Teach me about shapes",
      userId: testUser,
      sessionId: `${testSession}-format`
    });
    
    const text = response.data.response;
    expect(text).toMatch(/\?$/);
    
    // Check it's 2 sentences or less
    const sentences = text.match(/[.!?]+/g) || [];
    expect(sentences.length).toBeLessThanOrEqual(2);
  });

  test('TTS Streaming: Supports sentence-by-sentence', async () => {
    // This would need a WebSocket or streaming endpoint test
    // Verify TTS module is initialized
    const response = await axios.get(`${API_URL}/api/health`);
    expect(response.data.ttsEnabled).toBe(true);
  });
});

// Run tests
describe('Performance Benchmarks', () => {
  test('Handles 10 concurrent users', async () => {
    const promises = [];
    
    for (let i = 0; i < 10; i++) {
      promises.push(
        axios.post(`${API_URL}/api/voice/conversation`, {
          message: `User ${i} question`,
          userId: `user-${i}`,
          sessionId: `session-${i}`
        })
      );
    }
    
    const start = Date.now();
    const results = await Promise.allSettled(promises);
    const duration = Date.now() - start;
    
    const successful = results.filter(r => r.status === 'fulfilled');
    
    expect(successful.length).toBeGreaterThan(7); // At least 70% success
    expect(duration).toBeLessThan(5000); // All complete within 5s
  });
});
```

### Deployment Checklist
1. ✅ All new modules in `/server/modules/` directory
2. ✅ Minimal changes to existing files (only imports and small integrations)
3. ✅ Environment variables with safe defaults
4. ✅ Debug mode behind `DEBUG_TUTOR=1` flag  
5. ✅ Auth-gated debug endpoint
6. ✅ Comprehensive acceptance tests
7. ✅ One LLM call per turn enforced via queue
8. ✅ Barge-in cancels in-flight requests
9. ✅ Circuit breaker prevents 429 loops
10. ✅ Lesson grounding maintains topic focus

### Testing Commands
```bash
# Run acceptance tests
npm test tests/acceptance.test.ts

# Check debug logs
curl -H "Authorization: Bearer debug-key-2024" \
  http://localhost:5000/api/debug/last-turns?count=20

# Test voice conversation
curl -X POST http://localhost:5000/api/voice/conversation \
  -H "Content-Type: application/json" \
  -d '{"message": "What is 2 plus 3?", "userId": "test", "sessionId": "test-1"}'
```
```